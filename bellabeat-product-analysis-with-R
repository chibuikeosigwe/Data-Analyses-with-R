{"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"4.0.5"},"papermill":{"default_parameters":{},"duration":37.210262,"end_time":"2023-02-19T19:26:38.573678","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2023-02-19T19:26:01.363416","version":"2.4.0"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":7746251,"sourceType":"datasetVersion","datasetId":1041311}],"dockerImageVersionId":30433,"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/chibuikeosigwe/bellabeat-product-analysis-with-r?scriptVersionId=178794321\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"<h1 style=\"color: #FE8F77;\">Bellabeat Product Analysis</h1>\n<h2> How Can a Wellness Tech Company Play Smart </h2>","metadata":{"papermill":{"duration":0.021941,"end_time":"2023-02-19T19:26:05.501482","exception":false,"start_time":"2023-02-19T19:26:05.479541","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<center>\n<img src=\"https://i.imgur.com/xyYXZ1s.png\" alt=\"Bellabeat Product Analysis\" height=\"120px\" width=\"700px\" style=\"border: 2px solid #A3E7D9; border-radius: 40px;\">\n<center/>","metadata":{"papermill":{"duration":0.019707,"end_time":"2023-02-19T19:26:05.542845","exception":false,"start_time":"2023-02-19T19:26:05.523138","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<h1 style=\"color: #FE8F77;\">Table of Contents</h1>\n\n* [1. Overview](#section1)\n* [2. Ask Phase](#section2)\n    * [2.1 Business Task](#subsection2.1)\n    * [2.2 Stakeholders and Products](#subsection2.2)\n    * [2.3 Project Objective](#subsection2.3)\n* [3. Prepare Phase](#section3)\n    * [3.1 Data Source and Information](#subsection3.1)\n    * [3.2 Accessibility and Privacy of Data](#subsection3.2)\n    * [3.3 Data Organization and Verification](#subsection3.3)\n    * [3.4 Data Credibility and Integrity](#subsection3.4)\n    * [3.5 Methodology](#subsection3.5) \n* [4. Process Phase](#section4)\n    * [4.1 Data Cleaning and Formatting](#subsection4.1)\n        * [4.1.1 Installation and Loading of Packages & Libraries](#subsection4.1.1)\n        * [4.1.2 Data Import and Preview](#subsection4.1.2)\n        * [4.1.3 Duplicate Removal and Sample Verification](#subsection4.1.3)\n    * [4.2 Organize Data](#subsection4.2)\n        * [4.2.1 Modify Column Names](#subsection4.2.1)\n        * [4.2.2 Format Data Types and Date/Time Columns](#subsection4.2.2)\n    * [4.3 Transform Data](#subsection4.3)\n        * [4.3.1 Merge Data](#subsection4.3.1)\n        * [4.3.2 Add Additional Calculated Columns](#subsection4.3.2)\n* [5. Analyses and Share Phase](#section5)\n    *  [5.1 Physical Activity Level of Users per Active Minutes](#subsection5.1)\n        *  [5.1.1 Types of User per Average Weekly Active Minutes](#subsection5.1.1)\n        *  [5.1.2 Average Weekly Sedentary Minutes per User Type](#subsection5.1.2)\n        *  [5.1.3 Average Active and Sedentary Minutes per Weekday](#subsection5.1.3)\n    *  [5.2 Daily Steps and Calories Burned](#subsection5.2)\n        *  [5.2.1 Physical Activity Level of Users per Average Daily Steps](#subsection5.2.1)\n        *  [5.2.2 Average Daily Steps and Calories by Users per Weekday](#subsection5.2.2)\n    *  [5.3 Daily Minutes Asleep](#subsection5.3)\n        *  [5.3.1 Average Daily Sleep per User](#subsection5.3.1)\n        *  [5.3.2 Average Daily Sleep per Weekday](#subsection5.3.2)\n    *  [5.4 Hourly Activities throughout the Day](#subsection5.4)\n    *  [5.5 Correlations](#subsection5.5)\n        *  [5.5.1 Daily Sleep duration vs Total Time in Bed and Active Minutes](#subsection5.5.1)\n        *  [5.5.2 Calories Burned vs Steps and Intensity](#subsection5.5.2)\n        *  [5.5.3 Daily Active Minutes vs Steps Taken](#subsection5.5.3)\n* [6. Act Phase (Recommendations)](#section6)","metadata":{"papermill":{"duration":0.019474,"end_time":"2023-02-19T19:26:05.58198","exception":false,"start_time":"2023-02-19T19:26:05.562506","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"section1\"></a>\n<h1 style=\"color: #FE8F77;\">1. Overview</h1>\n\nThis project is part of the Google Data Analytics Professional Certificate Program. In this Capstone project, we are expected to perform real-world tasks of a junior data analyst. In this setting, I am working as a junior data analyst for [Bellabeat](https://bellabeat.com/), a high-tech manufacturer of health-focused products for women, and also meeting different characters and team members. \n\nThe Main Objective of this project is to analyze smart device usage data in order to gain actionable insight into how users use non-Bellabeat smart devices or sevices and how those insights can improve the growth of Bellabeat products and the overall wellbeing of users. The focus will be on one of Bellabeat’s products called **Bellabeat+ membership**.\n\nBellabeat+ membership is a subscription-based membership program for users. Membership gives users 24/7 access to fully personalized guidance on nutrition, activity, sleep, health and beauty, and mindfulness based on their lifestyle and goals.\n\nIn order to answer the key business questions, the key data analysis process: **ask**, **prepare**, **process**, **analyze**, **share**, and **act** will to be followed in this project, with each step enumerated in this report.\n","metadata":{"papermill":{"duration":0.019286,"end_time":"2023-02-19T19:26:05.621426","exception":false,"start_time":"2023-02-19T19:26:05.60214","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"section2\"></a>\n<h1 style=\"color: #FE8F77;\">2. Ask Phase</h1>\n\nHere we try to ask effective questions to understand the business task and also the key stakeholders involved in the analysis.\n\n\n","metadata":{"papermill":{"duration":0.019222,"end_time":"2023-02-19T19:26:05.659947","exception":false,"start_time":"2023-02-19T19:26:05.640725","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection2.1\"></a>\n<h2 style=\"color: #A3E7D9;\">2.1 Business Task</h2>\n\nProvide actionable insights from consumer’s user habit of non-Bellabeat smart devices so as to improve Bellabeat marketing strategy.\n\n<a id=\"subsection2.2\"></a>\n<h2 style=\"color: #A3E7D9;\">2.2 Stakeholders and Products</h2>\n\n* **Characters**\n    * **Urška Sršen**: Bellabeat’s co founder and Chief Creative Officer\n    * **Sando Mur**: Mathematician and Bellabeat cofounder; key member of the Bellabeat executive team\n    * **Bellabeat marketing analytics team**: A team of data analysts responsible for collecting, analyzing, and reporting data that helps guide Bellabeat’s marketing strategy. For this setting, I belong to this part of the team as a junior data analyst. \n\n* **Products**\n    Bellabeat offers many products like Bellabeat App, Leaf, Time, Spring and Bellabeat Membership. For this project, the focus will be on **Bellabeat+ Membership**: launched in 2019, a subscription service that provides women with specialized content in all wellness segments. With the subscription (**_that can be used with and without the device_**), users receive personalized daily plans and coaching, aligned with their menstrual cycle and goals\n\n<a id=\"subsection2.3\"></a>\n<h2 style=\"color: #A3E7D9;\">2.3 Project Objective</h2>\n\nA report (this report) will be produced with  the following deliverables:\n\n* A clear summary of the business task\n* A description of all data sources used\n* Documentation of any cleaning or manipulation of data\n* A summary of your analysis\n* Supporting visualizations and key findings\n* Your top high-level content recommendations based on your analysis\n\n","metadata":{"papermill":{"duration":0.019226,"end_time":"2023-02-19T19:26:05.698379","exception":false,"start_time":"2023-02-19T19:26:05.679153","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"section3\"></a>\n<h1 style=\"color: #FE8F77;\">3. Prepare Phase</h1>\n\nHere we identify needed data, who has access to the data, data format and storage. We also check for the credibility of the data and verify its integrity. We will describe the metrics used for the analysis and methodology. \n","metadata":{"papermill":{"duration":0.020394,"end_time":"2023-02-19T19:26:05.738347","exception":false,"start_time":"2023-02-19T19:26:05.717953","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection3.1\"></a>\n<h2 style=\"color: #A3E7D9;\">3.1 Data Source and Information</h2>\n\nThe data source used for our case study is ***FitBit Fitness Tracker Data***. This dataset is stored in Kaggle and was made available through [Mobius](https://www.kaggle.com/arashnic).\n\nData Source: [Kaggle | arashnic](https://www.kaggle.com/datasets/arashnic/fitbit)\n\nThese datasets were generated by respondents to a distributed survey via Amazon Mechanical Turk between 03.12.2016-05.12.2016. Thirty eligible Fitbit users consented to the submission of personal tracker data, including minute-level output for physical activity, heart rate, and sleep monitoring. Variation between output represents use of different types of Fitbit trackers and individual tracking behaviors / preferences.\n\n\n<a id=\"subsection3.2\"></a>\n<h2 style=\"color: #A3E7D9;\">3.2 Accessibility and Privacy of Data</h2>\n\nFrom the metadata, it is an open-source dataset. The owner has dedicated the work to the public domain by waiving all of his or her rights to the work worldwide under copyright law, including all related and neighboring rights, to the extent allowed by law. Hence, data can be copied, modified, distributed and analyzed,, even for commercial purposes without any need for consent.\n\nLicense: [CCO: Creative Commons | Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)\n\n\n<a id=\"subsection3.3\"></a>\n<h2 style=\"color: #A3E7D9;\">3.3 Data Organization and Verification</h2>\n\nThe dataset contains 18 CSV documents. Each document represents different quantitative data tracked by Fitbit. The data is considered long since each row is one time point per subject, so each subject will have data in multiple rows. Every user is assigned a unique ID which can be repeated in rows depending on the number of observations. The data is also tracked by two major variables: ***id*** and ***date/time***.   \n\nThe dataset were downloaded, loaded to Google Sheet for verification and summarized in the table below:\n","metadata":{"papermill":{"duration":0.01935,"end_time":"2023-02-19T19:26:05.777269","exception":false,"start_time":"2023-02-19T19:26:05.757919","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"**Description of the tables in the dataset**\n<table>\n  <tr>\n   <td><strong>Table Name</strong>\n   </td>\n   <td><strong>Type</strong>\n   </td>\n   <td><strong>Description</strong>\n   </td>\n  </tr>\n  <tr>\n   <td>dailyActivity_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Daily Activity over 31 days of 33 users. Tracking daily: Steps, Distance, Intensities, Calories\n   </td>\n  </tr>\n  <tr>\n   <td>dailyCalories_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Daily Calories over 31 days of 33 users\n   </td>\n  </tr>\n  <tr>\n   <td>dailyIntensities_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Daily Intensity over 31 days of 33 users. Measured in Minutes and Distance, dividing groups in 4 categories: Sedentary, Lightly Active, Fairly Active,Very Active\n   </td>\n  </tr>\n  <tr>\n   <td>dailySteps_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Daily Steps over 31 days of 33 users\n   </td>\n  </tr>\n  <tr>\n   <td>heartrate_seconds_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Exact day and time heartrate logs for just 7 users\n   </td>\n  </tr>\n  <tr>\n   <td>hourlyCalories_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Hourly Calories burned over 31 days of 33 users\n   </td>\n  </tr>\n  <tr>\n   <td>hourlyIntensities_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Hourly total and average intensity over 31 days of 33 users\n   </td>\n  </tr>\n  <tr>\n   <td>hourlySteps_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Hourly Steps over 31 days of 33 users\n   </td>\n  </tr>\n  <tr>\n   <td>minuteCaloriesNarrow_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Calories burned every minute over 31 days of 33 users (Every minute in single row)\n   </td>\n  </tr>\n  <tr>\n   <td>minuteCaloriesWide_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Calories burned every minute over 31 days of 33 users (Every minute in single column)\n   </td>\n  </tr>\n  <tr>\n   <td>minuteIntensitiesNarrow_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Intensity counted by minute over 31 days of 33 users (Every minute in single row)\n   </td>\n  </tr>\n  <tr>\n   <td>minuteIntensitiesWide_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Intensity counted by minute over 31 days of 33 users (Every minute in single column)\n   </td>\n  </tr>\n  <tr>\n   <td>minuteMETsNarrow_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Ratio of the energy you are using in a physical activity compared to the energy you would use at rest. Counted in minutes\n   </td>\n  </tr>\n  <tr>\n   <td>minuteSleep_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Log Sleep by Minute for 24 users over 31 days. Value column not specified\n   </td>\n  </tr>\n  <tr>\n   <td>minuteStepsNarrow_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Steps tracked every minute over 31 days of 33 users (Every minute in single row)\n   </td>\n  </tr>\n  <tr>\n   <td>minuteStepsWide_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Steps tracked every minute over 31 days of 33 users (Every minute in single column)\n   </td>\n  </tr>\n  <tr>\n   <td>sleepDay_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Daily sleep logs, tracked by: Total count of sleeps a day, Total minutes, Total Time in Bed\n   </td>\n  </tr>\n  <tr>\n   <td>weightLogInfo_merged\n   </td>\n   <td>Google Sheet CSV\n   </td>\n   <td>Weight track by day in Kg and Pounds over 30 days. Calculation of BMI.5 users report weight manually 3 users not.In total there are 8 users\n   </td>\n  </tr>\n</table>\n","metadata":{"papermill":{"duration":0.019414,"end_time":"2023-02-19T19:26:05.816149","exception":false,"start_time":"2023-02-19T19:26:05.796735","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection3.4\"></a>\n<h2 style=\"color: #A3E7D9;\">3.4 Data Credibility and Integrity</h2>\n\nUpon verification, it can be seen that the dataset contains the least needed metrics for our analysis over a certain period of time. However due to the limitation of size (average of 30 users), health status indicator and not having any demographic information we could encounter a sampling bias,  as we are not sure if the sample is representative of the whole population. The dataset is also not current due to the time of the observation, which is from ***03.12.2016 - 05.12.2016***. Hence, it will not be perfect for a predictive analysis. \n\n\n<a id=\"subsection3.5\"></a>\n<h2 style=\"color: #A3E7D9;\">3.5 Methodology</h2>\n\nDue to these limitations specified above, an exploratory and operational approach will be used to analyze the data for insights per available observationS. This involves categorizing and correlation of needful metrics and comparing them to the recommended metrics to see if users are meeting up with their recommended for physical activity and health goals. \n\nThe Metrics to be used include:\n\n\n\n1. **Average daily steps**: This metric can give us an idea of how active users are on a daily basis. We will use this metric to see whether users are meeting their daily step goals \n2. **Average daily active minutes**: This metric measures the amount of time users spend engaging in moderate to vigorous activity. We will use this metric to see whether users are meeting recommended guidelines for physical activity and also identify useful patterns. \n3. **Average daily sleep duration**: This metric can give you an idea of how much sleep users are getting on a daily basis. We will use this metric to see whether users are meeting recommended guidelines for sleep.\n4. **Average daily calories burned**: This metric measures the number of calories users burn on a daily basis. We will use this metric to see whether users are meeting their calorie burn goals.\n5. **Average daily distance traveled**: This metric measures the distance user's travel on a daily basis and how active that they are. \n6. **Average Sedentary Minutes**: This measures the amount of time users spend in very low intensity activity like sitting or lying down. \n\nTo achieve this, the following tables will have to be processed: ***dailyActivity_merged, sleepDay_meged, hourlyCalories_merged, hourlyIntensities_merged*** and ***hourlySteps_merged*** ","metadata":{"papermill":{"duration":0.019388,"end_time":"2023-02-19T19:26:05.854869","exception":false,"start_time":"2023-02-19T19:26:05.835481","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"section4\"></a>\n<h1 style=\"color: #FE8F77;\">4. Process Phase</h1>\n\nIn this phase, data is manipulated, wrangled and transformed. We describe how the data is stored, choose the tools, clean and check data for errors  so as to get the data ready for analysis. For the completion of this project, **_R_** will be used to process, analyze and visualize findings. The choice of tool is based on the small amount of data, easy grouping and easy accessibility of report.  ","metadata":{"papermill":{"duration":0.019296,"end_time":"2023-02-19T19:26:05.893451","exception":false,"start_time":"2023-02-19T19:26:05.874155","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":" <a id=\"subsection4.1\"></a>\n<h2 style=\"color: #A3E7D9;\">4.1 Data Cleaning and Formatting</h2>\n\nHere, the needed packages for data leanig and transformation are installed, data tables are impoted with needed variables formatted. ","metadata":{"papermill":{"duration":0.019535,"end_time":"2023-02-19T19:26:05.93246","exception":false,"start_time":"2023-02-19T19:26:05.912925","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection4.1.1\"></a>\n<h3 style=\"color: black;\">4.1.1 Installation and Loading of Packages & Libraries</h3>\n\nHere, the packages that will help us on our analysis are installed and loaded. The following packages will be used for the analysis.","metadata":{"papermill":{"duration":0.019826,"end_time":"2023-02-19T19:26:05.971578","exception":false,"start_time":"2023-02-19T19:26:05.951752","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# we load the following packages for data cleaning, organinization and Manipulation\n\nlibrary(tidyverse)\nlibrary(here)\nlibrary(skimr)\nlibrary(janitor)\nlibrary(lubridate)\nlibrary(ggrepel)\nlibrary(purrr)\nlibrary(ggplot2)\n\nlibrary(plotly)  # For more chart otions\nlibrary(dplyr)\nlibrary(gridExtra)\n\nprint(\"Packages Installed\")   # R will this output once the packag4es are loaded","metadata":{"papermill":{"duration":2.527234,"end_time":"2023-02-19T19:26:08.57841","exception":false,"start_time":"2023-02-19T19:26:06.051176","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:39.749871Z","iopub.execute_input":"2024-05-20T08:07:39.751986Z","iopub.status.idle":"2024-05-20T08:07:39.792123Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"subsection4.1.2\"></a>\n<h3 style=\"color: black;\">4.1.2 Data Import and Preview</h3>\n\nThe following needed tables will be imported from our dataset. They will be processd so as to get them ready for analysis: **_dailyActivity_merged, sleepDay_meged, hourlyCalories_merged, hourlyIntensities_merged _**and_ **hourlySteps_merged**_. \n\n","metadata":{"papermill":{"duration":0.020099,"end_time":"2023-02-19T19:26:08.618789","exception":false,"start_time":"2023-02-19T19:26:08.59869","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We import the tables and assigned a more consistent Variable name for clarity\n\ndaily_activity <- read_csv(\"/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyActivity_merged.csv\")\ndaily_sleep <- read_csv(\"/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/sleepDay_merged.csv\")\nhourly_calories <- read_csv(\"/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyCalories_merged.csv\")\nhourly_intensities <- read_csv(\"/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlyIntensities_merged.csv\")\nhourly_steps <- read_csv(\"/kaggle/input/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/hourlySteps_merged.csv\")\n    \nprint(\"Tables have been imported\")   # Returns this output once the tables above are succesfully imported\n","metadata":{"_kg_hide-output":false,"papermill":{"duration":0.935411,"end_time":"2023-02-19T19:26:09.57419","exception":false,"start_time":"2023-02-19T19:26:08.638779","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:39.795149Z","iopub.execute_input":"2024-05-20T08:07:39.796614Z","iopub.status.idle":"2024-05-20T08:07:40.207239Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Previewing the tables in the dataset to take a look at the structure, columns names and datatype\n\n# Creating a list of data frames or the tables imported\ndata_frames <- list(daily_activity, daily_sleep, hourly_calories, hourly_intensities, hourly_steps)\n\n\n# Using lapply() to apply head() and str() functions to each data frame above to get the data preview\nlapply(data_frames, head)\nlapply(data_frames, str)","metadata":{"papermill":{"duration":0.384355,"end_time":"2023-02-19T19:26:09.981574","exception":false,"start_time":"2023-02-19T19:26:09.597219","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:40.21173Z","iopub.execute_input":"2024-05-20T08:07:40.214298Z","iopub.status.idle":"2024-05-20T08:07:40.509555Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"The result of the preview above shows that columns with number metrics have the double and number data type, while the user ***id*** and ***Date*** columns have number and character data type respectively. It also shows that there are no null values in all the 5 imported data frames","metadata":{"papermill":{"duration":0.024241,"end_time":"2023-02-19T19:26:10.029879","exception":false,"start_time":"2023-02-19T19:26:10.005638","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection4.1.3\"></a>\n<h3 style=\"color: black;\">4.1.3 Duplicate Removal and Sample Verification</h3>\n\nHere, duplicates rows will be identified, removed and the number of unique samples verified","metadata":{"papermill":{"duration":0.023804,"end_time":"2023-02-19T19:26:10.078196","exception":false,"start_time":"2023-02-19T19:26:10.054392","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"We create a list of the dataframes we want to examine, use an iteration code to loop over the list of data frames, count the number of duplicates and nulls in each data frame and then print the result.","metadata":{"papermill":{"duration":0.025323,"end_time":"2023-02-19T19:26:10.128349","exception":false,"start_time":"2023-02-19T19:26:10.103026","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# a list of the imported dataframe\ndata_frames <- list(daily_activity, daily_sleep, hourly_calories, hourly_intensities, hourly_steps)\n\n# loop over the list of data frames\nfor (df in data_frames) {\n    \n  # count the number of duplicates in each of the data frame\n  n_duplicates <- sum(duplicated(df))\n\n  # count the number of NA rows in each data frame\n  n_na <- sum(apply(df, 1, anyNA))\n  \n  # print the number of duplicates and NA rows for each dataframe\n  print(paste(\"Number of duplicates is:\", n_duplicates))\n  print(paste(\"Number of NA rows is:\", n_na))\n}\n ","metadata":{"papermill":{"duration":0.591373,"end_time":"2023-02-19T19:26:10.744384","exception":false,"start_time":"2023-02-19T19:26:10.153011","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:40.512337Z","iopub.execute_input":"2024-05-20T08:07:40.513856Z","iopub.status.idle":"2024-05-20T08:07:40.971268Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above, only the 2nd data frame in the list ***daily_sleep*** contains duplicate of 3 rows.\nHence, we remove the duplicates in the code below. Per the preview; the ***daily_sleep*** contain 413 rows. So, we will have to re-confirm that the 3 duplicated rows have been removed as well. ","metadata":{"papermill":{"duration":0.023069,"end_time":"2023-02-19T19:26:10.790216","exception":false,"start_time":"2023-02-19T19:26:10.767147","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Remove duplicates from the daily_sleep data frame\ndaily_sleep <- daily_sleep %>%\nunique()\n\n# confirm if the duplicate has been removed\nsum(duplicated(daily_sleep))\n\n# confirm that the new number of rows in daily_sleep is equal to 410\nnrow(daily_sleep)\n","metadata":{"papermill":{"duration":0.066861,"end_time":"2023-02-19T19:26:10.880448","exception":false,"start_time":"2023-02-19T19:26:10.813587","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:40.974019Z","iopub.execute_input":"2024-05-20T08:07:40.975451Z","iopub.status.idle":"2024-05-20T08:07:41.002166Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# We now verify the number of unique users in all the tables or dataframes basedon the unique id\n\n# assigned list of data frames or tables\ndata_frames <- data_frames \n\n# Loop over the list of data frames so as to capture all the tables\nfor (df in data_frames) {\n    \n# Count the number of unique user id in each of the data frame\n n_unique_users <- n_unique(df$Id)\n    \n# Print the number of unique user id for each dataframe or table respectively\n  print(paste(\"Number of unique user id\", \"is\", \":\",  n_unique_users))\n}\n\n\n","metadata":{"papermill":{"duration":0.075808,"end_time":"2023-02-19T19:26:10.979746","exception":false,"start_time":"2023-02-19T19:26:10.903938","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.005144Z","iopub.execute_input":"2024-05-20T08:07:41.006652Z","iopub.status.idle":"2024-05-20T08:07:41.030855Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"All of our 5 loaded data frames contains 33 unique users represnting 33 samples taken, except for the 2nd table in the list ***daily_sleep*** containg only 24 sample. However, due to the importantance of the metrics to the analysis, it wil be included for operational purposes.  ","metadata":{"papermill":{"duration":0.02397,"end_time":"2023-02-19T19:26:11.02727","exception":false,"start_time":"2023-02-19T19:26:11.0033","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"\n<a id=\"subsection4.2\"></a>\n<h2 style=\"color: #A3E7D9;\">4.2 Organize Data</h2>\n\nHere, we ensure that column names are using right syntax and same format for consistency and modify the data type of variables if needed. \n","metadata":{"papermill":{"duration":0.022901,"end_time":"2023-02-19T19:26:11.073529","exception":false,"start_time":"2023-02-19T19:26:11.050628","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection4.2.1\"></a>\n<h3 style=\"color: black;\">4.2.1 Modify Column Names</h3>\n\nPer the preview, the columns name format used are consistent but in Camel Style format. We want a more differented format that can seperate each word consistently with an ***underscore***. To that effect we apply ***clean_names()*** to all the data frames. ","metadata":{"papermill":{"duration":0.023153,"end_time":"2023-02-19T19:26:11.119781","exception":false,"start_time":"2023-02-19T19:26:11.096628","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Since we are modifying the original imported dataframes and not the only the list,\n# we apply clean_names() individually to each data frame\n\n# we use invisible() suppresses the output                      \ninvisible({       \n \n# Modify the dataframes and store the modified dataframes back in the original variables\n  daily_activity <- clean_names(daily_activity)\n  daily_sleep <- clean_names(daily_sleep)\n  hourly_calories <- clean_names(hourly_calories)\n  hourly_intensities <- clean_names(hourly_intensities)\n  hourly_steps <- clean_names(hourly_steps)\n})\n\n# Store the dataframes in a list\ndata_frames <- list(daily_activity, daily_sleep, hourly_calories, hourly_intensities, hourly_steps)\n\n# Print the column names of all the dataframes to conirm that colnames have been modified\nfor (df in data_frames) {\n  print(paste(colnames(df), collapse = \", \"))\n}","metadata":{"papermill":{"duration":0.206437,"end_time":"2023-02-19T19:26:11.34957","exception":false,"start_time":"2023-02-19T19:26:11.143133","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.033592Z","iopub.execute_input":"2024-05-20T08:07:41.035047Z","iopub.status.idle":"2024-05-20T08:07:41.116174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"subsection4.2.2\"></a>\n<h3 style=\"color: black;\">4.2.2 Format Data Types and Date/Time Columns</h3>","metadata":{"papermill":{"duration":0.023212,"end_time":"2023-02-19T19:26:11.396319","exception":false,"start_time":"2023-02-19T19:26:11.373107","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"The data types for inconsistent columns will be formatted to the right one. Per the data preview the ***id*** column has a numerical data type -- double-- instead of a character string, while the ***date/time*** column has a character string data type instead of date-time type. ","metadata":{"papermill":{"duration":0.023735,"end_time":"2023-02-19T19:26:11.444066","exception":false,"start_time":"2023-02-19T19:26:11.420331","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Use the invisible() function to suppress the output of the code\ninvisible({\n    \n  # Change the data type of the \"id\" column in each dataframe to a character data type\n  daily_activity$id <- as.character(daily_activity$id)\n  daily_sleep$id <- as.character(daily_sleep$id)\n  hourly_calories$id <- as.character(hourly_calories$id)\n  hourly_intensities$id <- as.character(hourly_intensities$id)\n  hourly_steps$id <- as.character(hourly_steps$id)\n})\n\n  # Store the modified dataframes in a list\ndata_frames <- list(daily_activity, daily_sleep, hourly_calories, hourly_intensities, hourly_steps)\n\n  # Loop through the list of the dataframes\n  for(df in data_frames) {\n      \n  # Print the glimpse() of the \"id\" column for each dataframe to confirm the data type modification\n    glimpse(df$id)\n  }\n","metadata":{"papermill":{"duration":0.072121,"end_time":"2023-02-19T19:26:11.539539","exception":false,"start_time":"2023-02-19T19:26:11.467418","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.118866Z","iopub.execute_input":"2024-05-20T08:07:41.120268Z","iopub.status.idle":"2024-05-20T08:07:41.152284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above output, the result shows that the ***id*** column of the 5 data frames imported hasve now been formatted to character string data type. This is to avoid R recognizing it as numerics during analyses and calcultions as it is a unique identifier. \n\nBelow, we format and modify the date/time columns in each dataframe to date-time data type. We will format daily and hourly time formats differently.  ","metadata":{"papermill":{"duration":0.023177,"end_time":"2023-02-19T19:26:11.586177","exception":false,"start_time":"2023-02-19T19:26:11.563","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# For the daily_activity and daily_sleep dataframes\n# We format the data type to Date type and modify the column name\n\ndaily_activity <- daily_activity %>%\n  rename(date = activity_date) %>%\n  mutate(date = as_date(date, format = \"%m/%d/%Y\"))\n\ndaily_sleep <- daily_sleep %>%\n  rename(date = sleep_day) %>%\n  mutate(date = as_date(date,format =\"%m/%d/%Y %I:%M:%S %p\"))\n\n# Store the modified dataframes in a list\ndf_daily <- list(daily_activity, daily_sleep)\n\n# Loop through the list of the dataframes\n  for(df in df_daily) {\n      \n# Print the glimpse() of the \"date\" column for each dataframe to confirm the data type modification\n    glimpse(df$date)\n  }\n","metadata":{"papermill":{"duration":0.180277,"end_time":"2023-02-19T19:26:11.789747","exception":false,"start_time":"2023-02-19T19:26:11.60947","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.15507Z","iopub.execute_input":"2024-05-20T08:07:41.15652Z","iopub.status.idle":"2024-05-20T08:07:41.202119Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# For the hourly_calories, hourly_intensities and hourly_steps dataframes\n# We format the data type to POSIXct(Date Time) type and modify the column name\n\nhourly_calories<- hourly_calories %>% \n  rename(date_time = activity_hour) %>% \n  mutate(date_time = as.POSIXct(date_time,format =\"%m/%d/%Y %I:%M:%S %p\" , tz=Sys.timezone()))\n\nhourly_intensities<- hourly_intensities %>% \n  rename(date_time = activity_hour) %>% \n  mutate(date_time = as.POSIXct(date_time,format =\"%m/%d/%Y %I:%M:%S %p\" , tz=Sys.timezone()))\n\nhourly_steps<- hourly_steps %>% \n  rename(date_time = activity_hour) %>% \n  mutate(date_time = as.POSIXct(date_time,format =\"%m/%d/%Y %I:%M:%S %p\" , tz=Sys.timezone()))\n\n# Store the modified dataframes in a list\ndf_hourly <- list(hourly_calories,hourly_intensities, hourly_steps)\n\n# Loop through the list of the dataframes\n  for(df in df_hourly) {\n      \n# Print the str() of the \"date_time\" column for each dataframe to confirm the data type modification\n    str(df$date_time)\n  }","metadata":{"papermill":{"duration":0.195024,"end_time":"2023-02-19T19:26:12.009048","exception":false,"start_time":"2023-02-19T19:26:11.814024","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.204892Z","iopub.execute_input":"2024-05-20T08:07:41.206331Z","iopub.status.idle":"2024-05-20T08:07:41.340901Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"subsection4.3\"></a>\n<h2 style=\"color: #A3E7D9;\">4.3 Transform Data</h2>","metadata":{"papermill":{"duration":0.024156,"end_time":"2023-02-19T19:26:12.056739","exception":false,"start_time":"2023-02-19T19:26:12.032583","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"Here the cleaned and organized data are merged and wrangled. Additional columns and metrics that are needed for analysis will be added and calculated.","metadata":{"papermill":{"duration":0.023648,"end_time":"2023-02-19T19:26:12.104013","exception":false,"start_time":"2023-02-19T19:26:12.080365","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection4.3.1\"></a>\n<h3 style=\"color: black;\">4.3.1 Merge Data</h3>\n\nDataframes are merged to ease calculation and referincing. Here we merged the ***daily_activity*** and ***daily_sleep*** together since they were sampled daily. After which the other three hourly dataframes will be merged as well. ","metadata":{"papermill":{"duration":0.023858,"end_time":"2023-02-19T19:26:12.152349","exception":false,"start_time":"2023-02-19T19:26:12.128491","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We merge daily_activity and daily_sleep by the id and date column\ndaily_activity_sleep <- merge(daily_activity, daily_sleep, by=c (\"id\", \"date\"))\n\n# return the glimpse of the new merged dataframe for preview\nglimpse(daily_activity_sleep)","metadata":{"papermill":{"duration":0.095459,"end_time":"2023-02-19T19:26:12.271618","exception":false,"start_time":"2023-02-19T19:26:12.176159","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.343605Z","iopub.execute_input":"2024-05-20T08:07:41.345031Z","iopub.status.idle":"2024-05-20T08:07:41.380981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# In base R, only 2 columns can be merged at a time\n\n# We merge hourly_calories and hourly_intensities by the id and date_time column\nhourly_activity <- merge(hourly_calories, hourly_intensities, by=c (\"id\", \"date_time\"))\n\n# we merged the result above with hourly_steps the id and date_time column\nhourly_activity <- hourly_activity %>%\n    merge(hourly_steps, by=c (\"id\", \"date_time\"))\n\n# return the glimpse of the new merged dataframe for preview\nglimpse(hourly_activity)","metadata":{"papermill":{"duration":0.719875,"end_time":"2023-02-19T19:26:13.0215","exception":false,"start_time":"2023-02-19T19:26:12.301625","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.383715Z","iopub.execute_input":"2024-05-20T08:07:41.385132Z","iopub.status.idle":"2024-05-20T08:07:41.930701Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"subsection4.3.2\"></a>\n<h3 style=\"color: black;\">4.3.2 Add Additional Calculated Columns</h3>\n\nBased on the metrics that will be used for analysis, additinal calculated columns will be needed. During, data organizaion above, the data frames were merged to form 2 dataframes: ***daily_activity_sleep*** and ***hourly_activity***.\nThese 2 merged dataframes together with the ***daily_activity*** dataframe will be transformed for analysis.\n\nIn the ***daily_activity_sleep*** and ***daily_activity*** dataframes, 3 columns: ****very_active_minutes****, ***fairly_active_minutes*** and ***lightly_active_minutes*** columns will be summed to get the ***total_active_minutes*** column.\n\nIn the same ***daily_activity_sleep*** dataframe, a new column named ***total_hours_asleep*** will be calculated from the ***total_minutes_asleep*** column\n\nIn the same ***daily_activity_sleep*** and ***daily_activity*** dataframes, a new column named ***weekday*** will be calculated from the ***date*** column\n\nIn the ***hourly_activity*** dataframe, we add a new column from the ***date_time*** column that sepecify the period","metadata":{"papermill":{"duration":0.023612,"end_time":"2023-02-19T19:26:13.068558","exception":false,"start_time":"2023-02-19T19:26:13.044946","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Use mutate function to create a new column called total_active_minutes\n\n# for the daily_activity dataframe\ndaily_activity <- daily_activity %>%\n  mutate(total_active_minutes = very_active_minutes + fairly_active_minutes + lightly_active_minutes)\n\n# for the daily_activity_sleep dataframe\ndaily_activity_sleep <- daily_activity_sleep %>%\n  mutate(total_active_minutes = very_active_minutes + fairly_active_minutes + lightly_active_minutes)","metadata":{"papermill":{"duration":0.059817,"end_time":"2023-02-19T19:26:13.152309","exception":false,"start_time":"2023-02-19T19:26:13.092492","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.93364Z","iopub.execute_input":"2024-05-20T08:07:41.935132Z","iopub.status.idle":"2024-05-20T08:07:41.995419Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Getting the new column named total_hours_asleep from the total_minutes_asleep column\n\n# Divide the total_minutes_asleep column by 60 to get the total number of hours\ndaily_activity_sleep <- daily_activity_sleep %>%\n  mutate(total_hours_asleep = total_minutes_asleep / 60)\n","metadata":{"papermill":{"duration":0.054609,"end_time":"2023-02-19T19:26:13.229958","exception":false,"start_time":"2023-02-19T19:26:13.175349","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:41.998189Z","iopub.execute_input":"2024-05-20T08:07:41.999613Z","iopub.status.idle":"2024-05-20T08:07:42.020268Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Next, we extract the day of the week from the ***date*** column in the ***daily_activity_sleep*** and ***daily_activity*** dataframes and store it in a new column called ***weekday***:","metadata":{"papermill":{"duration":0.023243,"end_time":"2023-02-19T19:26:13.276645","exception":false,"start_time":"2023-02-19T19:26:13.253402","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Extract the day of the week from the date column and store it in a new column called \"weekday\",\n# using the mutate() function and the weekdays() function from the lubridate package\n\n# for the daily_activity_sleep dataframe\ndaily_activity_sleep <- daily_activity_sleep %>%\n  mutate(weekday = weekdays(date))\n\n# for the daily_activity dataframe\ndaily_activity <- daily_activity %>%\n  mutate(weekday = weekdays(date))\n\n","metadata":{"papermill":{"duration":0.093564,"end_time":"2023-02-19T19:26:13.393599","exception":false,"start_time":"2023-02-19T19:26:13.300035","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.023093Z","iopub.execute_input":"2024-05-20T08:07:42.024577Z","iopub.status.idle":"2024-05-20T08:07:42.049078Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We now confirm that the new columns; ***total_active_minutes***, ***total_hours_asleep*** and ***weekday*** above have been added to the ***daily_activity_sleep*** and ***daily_activity*** dataframes as needed.","metadata":{"papermill":{"duration":0.023716,"end_time":"2023-02-19T19:26:13.440658","exception":false,"start_time":"2023-02-19T19:26:13.416942","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# return the glimpse of the dataframes to confirm the new added columns\n\nglimpse(daily_activity)\nglimpse(daily_activity_sleep)\n","metadata":{"papermill":{"duration":0.094829,"end_time":"2023-02-19T19:26:13.558927","exception":false,"start_time":"2023-02-19T19:26:13.464098","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.051939Z","iopub.execute_input":"2024-05-20T08:07:42.05343Z","iopub.status.idle":"2024-05-20T08:07:42.101297Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the ***hourly_activity*** dataframe, we now add a new column from the ***date_time*** column that sepecify the period of the day based on the following conditions:\n* **Morning**: Period of time between midnight and noon.\n* **Afternoon**: Period of time between noon and 6:00 PM.\n* **Evening**: Period of time between 6:00 PM and midnight","metadata":{"papermill":{"duration":0.024835,"end_time":"2023-02-19T19:26:13.607793","exception":false,"start_time":"2023-02-19T19:26:13.582958","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We use mutate function to create a new column called day_period using the case_when function,\n# specify conditions, and for each condition that is TRUE, the corresponding day period will be returned\n# If no conditions are TRUE, NA will be returned. \n\n\n# Convert the date_time column to the POSIXlt data type\nhourly_activity <- hourly_activity %>%\n  mutate(date_time = as.POSIXlt(date_time))\n\n# Create a new column called day_period by the conditions stated\nhourly_activity <- hourly_activity %>%\n  mutate(day_period = case_when(\n    date_time$hour >= 0 & date_time$hour < 12 ~ \"morning\",\n    date_time$hour >= 12 & date_time$hour < 18 ~ \"afternoon\",\n    date_time$hour >= 18 & date_time$hour < 24 ~ \"evening\",\n    TRUE ~ NA_character_\n  ))\n\n# return the glimpse of the dataframe to confirm the new added day_period column\nglimpse(hourly_activity)","metadata":{"papermill":{"duration":0.157049,"end_time":"2023-02-19T19:26:13.790167","exception":false,"start_time":"2023-02-19T19:26:13.633118","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.104098Z","iopub.execute_input":"2024-05-20T08:07:42.105574Z","iopub.status.idle":"2024-05-20T08:07:42.194415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"<a id=\"section5\"></a>\n<h1 style=\"color: #FE8F77;\">5. Analyses and Share Phase</h1>\n\nHere, processed dataframes: ***daily_activity***, ***daily_activity_sleep***, and ***hourly_activity*** will be analyzed and the findings visualized simultaneously using R. These dataframes contain the metrics needed for analyses. Due to the nature of the data, an exploratory and operational approach will be used in the analyses to get actionable insights. These approaches include categorization and correlation. \n\nThe needed metrics will be categorized to know how active users are and to see if they are meeting up the recommended health and fitness guidelines. Correlation will be carried amongst some metrics to check for useful relationships.","metadata":{"papermill":{"duration":0.023933,"end_time":"2023-02-19T19:26:13.838105","exception":false,"start_time":"2023-02-19T19:26:13.814172","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.1\"></a>\n<h2 style=\"color: #A3E7D9;\">5.1  Physical Activity Level of Users</h2>\n\nHere, the activity level of users are explored and categorized to find any useful patterns and to know if they are meeting up with the recommended level of physical activity. ","metadata":{"papermill":{"duration":0.024627,"end_time":"2023-02-19T19:26:13.886583","exception":false,"start_time":"2023-02-19T19:26:13.861956","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection45.1.1\"></a>\n<h3 style=\"color: black;\">5.1.1 Types of User per Average Weekly Active Minutes</h3>\n\n*The Centers for Disease Control and Prevention (CDC)*, *The American Heart Association (AHA)*, and *World Health Organization* (WHO) provides guidelines for physical activity and recommends that adults aged 18 - 64 engage in at least 150 minutes of moderate intensity (such as brisk walking) or 75 minutes of vigorous intensity activity per week (such as jogging), and aim to reduce the time spent in prolonged sedentary activities like sitting.\n\nUsing the above reference in our ***daily_activity*** dataframe, we categorize the users as follows:\n\n* **Very Active Users**: Users with ***both*** at least 150 minutes of  ***fairly_active_minutes*** and 75 minutes of ***very_active_minutes*** per week **or** at least 150 minutes of ***very_active_minutes*** per week.\n* **Active Users**: Users with ***either*** at least 150 minutes of ***fairly_active_minutes*** or 75 minutes of ***very_active_minutes*** per week\n* **Less Active Users**: Users ***without*** at least 150 minutes of ***fairly_active_minutes*** or 75 minutes of ***very_active_minutes*** per week.","metadata":{"papermill":{"duration":0.024622,"end_time":"2023-02-19T19:26:13.935391","exception":false,"start_time":"2023-02-19T19:26:13.910769","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Group the data by id and week and calculate the average weekly active minutes per user\n\n# Group the data by id and week\navg_weekly_active_minutes <- daily_activity %>% \n  group_by(id, week = week(date)) %>%\n\n  # calculate the total daily active minutes per week and group them for per user\n  summarize(sum_fairly_active_minutes = sum(fairly_active_minutes), \n            sum_very_active_minutes = sum(very_active_minutes), sum_sedentary_minutes = sum(sedentary_minutes)) %>%\n  group_by(id) %>%\n\n  # calculate the average weekly active minutes and sedentary minutes per user\n  summarize(avg_fairly_active_minutes = mean(sum_fairly_active_minutes), \n            avg_very_active_minutes = mean(sum_very_active_minutes), avg_sedentary_minutes = mean(sum_sedentary_minutes))\n\n\n# show a preview of the result for confirmation\nhead(avg_weekly_active_minutes)","metadata":{"papermill":{"duration":0.14364,"end_time":"2023-02-19T19:26:14.102928","exception":false,"start_time":"2023-02-19T19:26:13.959288","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.197704Z","iopub.execute_input":"2024-05-20T08:07:42.199239Z","iopub.status.idle":"2024-05-20T08:07:42.28596Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since, we have gotten each user's average weekly active minutes for both ***fairly_active_minutes*** and ***very_active_minutes***, we now classify each user's activity level based on the conditins prior initialized above. ","metadata":{"papermill":{"duration":0.024904,"end_time":"2023-02-19T19:26:14.152545","exception":false,"start_time":"2023-02-19T19:26:14.127641","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# The code uses the mutate() to add a new column called \"user_type\" to the dataframe \"avg_weekly_active_minutes\"\n#The ifelse() function is used to determine the user type based on the given conditions. \n\navg_weekly_active_minutes <- avg_weekly_active_minutes %>%\n  \n  # Add new column called user_type to avg_weekly_active_minutes dataframe\n  # Determine user type based on given conditions\n  mutate(user_type = ifelse(avg_fairly_active_minutes >= 150 & avg_very_active_minutes >= 75 \n  | avg_very_active_minutes >= 150, \"Very Active\",                      \n  ifelse(avg_fairly_active_minutes >= 150 \n  | avg_very_active_minutes >= 75, \"Active\", \"Less Active\")))\n\n# Show the preview of the dataframe to confirm the new added column\nhead(avg_weekly_active_minutes)","metadata":{"papermill":{"duration":0.073716,"end_time":"2023-02-19T19:26:14.251088","exception":false,"start_time":"2023-02-19T19:26:14.177372","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.290134Z","iopub.execute_input":"2024-05-20T08:07:42.291617Z","iopub.status.idle":"2024-05-20T08:07:42.326731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Since, we have added the column for the category of user type per user, we now calculate the percentage of users for each category to enable us plot a pie chart.","metadata":{"papermill":{"duration":0.026031,"end_time":"2023-02-19T19:26:14.302108","exception":false,"start_time":"2023-02-19T19:26:14.276077","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We first counted the number of users in each user_type category using the aggregate() function. \n# We calculated the percentage of users for each category \n# by dividing the counts by the total number of users and multiplying by 100.\n\n# Count the number of users in each user_type category\nuser_type_counts <- aggregate(avg_weekly_active_minutes$user_type, by=list(avg_weekly_active_minutes$user_type), \n                              FUN=length)\ncolnames(user_type_counts) <- c(\"user_type\", \"count\")\n\n# Calculate the percentages\nuser_type_counts$percentage <- user_type_counts$count / sum(user_type_counts$count) * 100\n\n# Return the user_type with corresponding count and percentages\nuser_type_counts","metadata":{"papermill":{"duration":0.092211,"end_time":"2023-02-19T19:26:14.41921","exception":false,"start_time":"2023-02-19T19:26:14.326999","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.329559Z","iopub.execute_input":"2024-05-20T08:07:42.331079Z","iopub.status.idle":"2024-05-20T08:07:42.361596Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"After calculating the percentage for each user type above, we now plot a donut chart showing the percentage for each user type","metadata":{"papermill":{"duration":0.025399,"end_time":"2023-02-19T19:26:14.470061","exception":false,"start_time":"2023-02-19T19:26:14.444662","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We used the ggplot to create the chart, we specified the data frame to be user_type_counts, \n# y axis to be percentage and fill color to be user_type. \n# We used geom_col to create the chart and also specify the hole size\n# We used coord_polar() to turn the bar columns into a pie chart chart\n# We use geom_text() to add the percentage and label in each segment\n# We use the xlim() to set limits to the chart thereby turning the pie into a Donut Chart using the hole size\n# We remove uneccesary chart elements using the theme_void(). \n\n# Specifying the Hole size\nhole_size <- 1.7\n\n# Plot the Donut Chart\nggplot(user_type_counts, aes(x = hole_size, y = percentage, fill = user_type)) +\n  geom_col(color = \"black\") +\n  geom_text(aes(label = paste0(round(percentage), \"%\")),\n             position = position_stack(vjust = 0.5), size = 8) +\n  coord_polar(theta = \"y\") +\n  xlim(c(0.2, hole_size + 0.5)) +\n  theme_void()+ \n  \n  # Add the label name for both axes, title name and subtitle name\n  labs(title = \"Percentage of Users per Weekly Active Minutes\", x = \"\", y= \"Percentage (%)\",\n      subtitle = \"Over 55% of users don't meet their weekly goal for physical activity\") +\n\n  # We customize the labels, titles, positions and the chart backround\n  theme(plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n        legend.position = \"right\", legend.title = element_text(size = 14, face = \"bold\"),\n        legend.text = element_text(size = 13),\n        plot.subtitle = element_text(size = 13, hjust = 0.5, face = \"italic\")) +\n\n  # We manually assign our own colors to the chart fills and name to the Legend\n  scale_fill_manual(values = c(\"#695D47\", \"#FE8F77\", \"#A3E7D9\"), name = \"User Type\")                              ","metadata":{"papermill":{"duration":0.898199,"end_time":"2023-02-19T19:26:15.393525","exception":false,"start_time":"2023-02-19T19:26:14.495326","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.364471Z","iopub.execute_input":"2024-05-20T08:07:42.365911Z","iopub.status.idle":"2024-05-20T08:07:42.696455Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above plot:\n* Over **55%** percent of users don't meet up to their recommended weekly goal for physical activity. They neither reach 75 minutes of vigorous or 150 minutes of moderate active minutes weekly. \n* Over **27%** are super active; they reach both 75 minutes of vigorous and 150 minutes of moderate active minutes weekly. ","metadata":{"papermill":{"duration":0.026461,"end_time":"2023-02-19T19:26:15.446591","exception":false,"start_time":"2023-02-19T19:26:15.42013","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.1.2\"></a>\n<h3 style=\"color: black;\">5.1.2 Average Sedentary Minutes per User Type</h3>\n\nThis metric measures the amount of time users spend in very low intensity activity like sitting or lying down. Here, we explore this metric in respect to the 3 user types to find out which of the user type has more or less sedentary minutes. The recommended goal or aim is to reduce the time spent in prolonged sedentary activities like sitting or lying down.\n \n","metadata":{"papermill":{"duration":0.02628,"end_time":"2023-02-19T19:26:15.499091","exception":false,"start_time":"2023-02-19T19:26:15.472811","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Group the data by user type and calculate the average weekly sedentary minutes per user type\n\n# Group the data by user type\nsedentary_minutes_per_user_type <- avg_weekly_active_minutes %>% \n  group_by(user_type) %>%\n\n  # calculate the mean of the average weekly sedentary minutes of users per user type\n  summarize(avg_sedentary_minutes_per_user_type = mean(avg_sedentary_minutes))\n\n# Display the grouped dataframe\nsedentary_minutes_per_user_type","metadata":{"papermill":{"duration":0.078112,"end_time":"2023-02-19T19:26:15.603598","exception":false,"start_time":"2023-02-19T19:26:15.525486","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.699383Z","iopub.execute_input":"2024-05-20T08:07:42.700895Z","iopub.status.idle":"2024-05-20T08:07:42.73299Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Using the above table, we now plot a haorizontal bar chart showing each of the user type and their avearage weekly sedentary minutes","metadata":{"papermill":{"duration":0.02632,"end_time":"2023-02-19T19:26:15.656397","exception":false,"start_time":"2023-02-19T19:26:15.630077","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We create a horizontal bar chart with the user types on the y-axis, the average sedentary minutes on the x-axis \n# We inserted a vertical line intercept showing the least average sedentary minutes per user type\n# we use geom_text() to label the the intercept on the specific cordinate\n\nggplot(data = sedentary_minutes_per_user_type, aes(x = avg_sedentary_minutes_per_user_type, \n    y = user_type, fill = user_type)) +\n  geom_col(width = 0.7) +\n  geom_vline(xintercept = 5184.500, linewidth = 0.3, color = \"red\") + \n  geom_text(aes(x = 5500.500, label = \"5184.500\", y =\"Active\", angle = 90, size = 20), \n    show.legend = FALSE) +\n  theme_minimal()+\n\n  # Add the label name for both axes, title name and subtitle name\n  xlab(\"Average Sedentary Minutes\")+\n  ylab(\"User Type\")+\n  ggtitle(\"Average Weekly Sedentary Minutes per User Type\")+\n  labs(subtitle = \"Less Active Users have the most sedentary minutes\")+\n  \n  # using the theme(), we customize the axes labels, titles, legend and the chart backround\n  theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n        axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n        axis.title.x=element_text(size=14,face=\"bold\"),\n        axis.title.y=element_text(size=14,face=\"bold\"),\n        plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5),\n        legend.position = \"right\", legend.title = element_text(size = 14, face = \"bold\"),\n        legend.text = element_text(size = 13),\n        plot.subtitle = element_text(size = 15, hjust = 0.5, face = \"italic\"),\n        panel.background = element_rect(fill = \"transparent\"))+\n\n  # We manually assign our own colors to the chart or bar fills and modify the legend title\n  scale_fill_manual(values=c(\"#695D47\", \"#FE8F77\", \"#A3E7D9\"), name = \"User Type\") +\n\n  # Customizing the axes scale, line and ticks\n  scale_x_continuous(limits = c(0, 7000), \n                      breaks = seq(0, 7000, by = 1000)) +\n  theme(axis.line.x = element_line(color = \"black\", linewidth = 0.5),\n          axis.ticks.x = element_line(color = \"black\", linewidth = 0.5),\n          axis.line.y = element_line(color = \"black\", linewidth = 0.5))","metadata":{"papermill":{"duration":0.603952,"end_time":"2023-02-19T19:26:16.286681","exception":false,"start_time":"2023-02-19T19:26:15.682729","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:42.735905Z","iopub.execute_input":"2024-05-20T08:07:42.737401Z","iopub.status.idle":"2024-05-20T08:07:43.148499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above plot:\n* The Less Active users -- who were classified as users that don't meet the recommended goal for weekly physical activity-- also have the most average weekly sedentary minutes. This implies that they spend more minutes weekly engaging in very low intensity activities.\n* The Very Active users tend to have more sedentary minutes than the Active users. That may or may not have any significant effect on their health and overall wellbeing as both user groups on average meet their weekly recommended goal for physical activity. \n* The recommended goal is to reduce prolong sedentary activities as much as possible.  ","metadata":{"papermill":{"duration":0.028682,"end_time":"2023-02-19T19:26:16.34374","exception":false,"start_time":"2023-02-19T19:26:16.315058","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.1.3\"></a>\n<h3 style=\"color: black;\">5.1.3 Average Active and Sedentary Minutes per Weekday</h3>\n\nHaven explored both average active minutes and averge sedentry minutes per user, we now compare the both metrics per weekday to find patterns","metadata":{"papermill":{"duration":0.027759,"end_time":"2023-02-19T19:26:16.400852","exception":false,"start_time":"2023-02-19T19:26:16.373093","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We create a dataframe from the daily activity dataframe, then group and ordered the weekdays in sequence\n# We then calculate the average for the total active minutes and sedentary minutes per weekday\n\nactive_sedentary_minutes_per_weekday <- daily_activity %>%\n   mutate(weekday=factor(weekday, levels = \n     c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"), ordered = TRUE)) %>%\n   group_by(weekday) %>%\n  \n   summarize(avg_sedentary_minutes_per_weekday = mean(sedentary_minutes), \n    avg_total_active_minutes_per_weekday = mean(total_active_minutes))\n\n# Return the dataframe created\nactive_sedentary_minutes_per_weekday ","metadata":{"papermill":{"duration":0.097239,"end_time":"2023-02-19T19:26:16.525867","exception":false,"start_time":"2023-02-19T19:26:16.428628","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:43.151894Z","iopub.execute_input":"2024-05-20T08:07:43.15348Z","iopub.status.idle":"2024-05-20T08:07:43.193299Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Next, we plot a grouped bar chart showing average sedentary minutes and average total active minutes per weekday.\nWe do that by modifying the dataframe above into a long data format and then ploting the grouped bar chart","metadata":{"papermill":{"duration":0.027909,"end_time":"2023-02-19T19:26:16.582081","exception":false,"start_time":"2023-02-19T19:26:16.554172","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# gather() function to transform the dataframe into a long format\n# We create a grouped bar chart with the user Average Minutes for both sedentary and active on the y-axis, \n# weekday on x axis.\n# We inserted a horizontal line intercept showing the highest average sedentary minutes per weekday\n# we use geom_text() to label the the intercept\n\n# Transform dataframe into long format\nactive_sedentary_minutes_per_weekday_long <- active_sedentary_minutes_per_weekday %>%  \n  gather(key = \"variables\", value = \"values\", -weekday)\n\n#Plot the grouped bar chart\nggplot(data = active_sedentary_minutes_per_weekday_long, aes(x = weekday, y = values, fill = variables)) +\n  geom_col(position =\"dodge\", width = 0.7) +\n  geom_hline(yintercept = 1027.9417, linewidth = 0.3, color = \"black\") + \n  geom_text(aes(y = 1050, label = \"1028\", x =\"Monday\", angle = 0, size = 18), \n    show.legend = FALSE) + \n\n  # Add the label name for both axes, title name and subtitle name\n  ggtitle(\"Average Sedentary and Active Minutes per Weekday\") + \n  xlab(\"Weekday\") +\n  ylab(\"Average Minutes per Weekday\")+\n  labs(subtitle = \"A high ratio of Sedentary to Active Minutes per weekday\")+\n\n  # We manually assign our own colors to the chart or bar fills, modify legend title and labels \n  scale_fill_manual(labels = c(\"avg_sedentary_minutes_per_weekday\" = \"Sedentary Minutes\", \n    \"avg_total_active_minutes_per_weekday\" = \"Total Active Minutes\"), \n    values = c(\"avg_sedentary_minutes_per_weekday\" = \"#FF6782\",\n    \"avg_total_active_minutes_per_weekday\" = \"#00CA8D\"), name = \"Average Minutes\") +\n\n  # using the theme(), we customize the axes labels, titles, legend and the chart backround\n  theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n        axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n        axis.title.x=element_text(size=14,face=\"bold\"),\n        axis.title.y=element_text(size=14,face=\"bold\"),\n        plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n        legend.position = \"right\", legend.title = element_text(size = 14, face = \"bold\"),\n        legend.text = element_text(size = 13),\n        plot.subtitle = element_text(size = 14, hjust = 0.5, face = \"italic\"),\n        panel.background = element_rect(fill = \"transparent\")) + \n\n  # Customizing the axes scale, line and ticks\n  theme(axis.line.x = element_line(color = \"black\", linewidth = 0.5),\n          axis.ticks.x = element_line(color = \"black\", linewidth = 0.5),\n          axis.line.y = element_line(color = \"black\", linewidth = 0.5))","metadata":{"papermill":{"duration":0.829293,"end_time":"2023-02-19T19:26:17.439305","exception":false,"start_time":"2023-02-19T19:26:16.610012","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:43.196159Z","iopub.execute_input":"2024-05-20T08:07:43.197643Z","iopub.status.idle":"2024-05-20T08:07:43.589125Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above plot:\n* Users engage in a ***high sedentary*** activities than active activies throughout the weekdays. \n* The activity pattern are reltvely the same per weekday for both the sedentary and active minutes. \n* This implies that although the Less Active users engage in more sedentary activities than other usser types, all users have a high sedentary to active minutes ratio which are relatively the same per weekday. ","metadata":{"papermill":{"duration":0.029406,"end_time":"2023-02-19T19:26:17.498695","exception":false,"start_time":"2023-02-19T19:26:17.469289","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.2\"></a>\n<h2 style=\"color: #A3E7D9;\">5.2 Average Daily Steps and Calories Burned</h2>\n\nHaven explored and categorize users based on their physical activity level per active minutie, we now drill down to the daily steps to verify if users are meeting up with their recommended number for daily steps and any patterns per weekday. We also explore the daily calories burned to see if users are getting the required health results from the physical activities.\n\nThe *World Health Organization (WHO)* recommends a daily step goal of 10,000 steps per day as a target for active adults to maintain good health. This is based on the idea that 10,000 steps is roughly equivalent to about 30 minutes of moderate-intensity physical activity. In addition, the *Centers for Disease Control and Prevention (CDC)* also  recommends muscle-strengthening activities at least two days a week. This equates to around 7,000 to 8,000 steps per day for moderate intensity activity. \n\nCalories burned depends on various factors such as weight, height, age, gender, and physical activity level.","metadata":{"papermill":{"duration":0.029646,"end_time":"2023-02-19T19:26:17.557554","exception":false,"start_time":"2023-02-19T19:26:17.527908","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.2.1\"></a>\n<h3 style=\"color: black;\">5.2.1 Physical Activity Level of Users per Avearge Daily Steps</h3>\n\nBased on the ***pedometer indices*** by *World Health Organization (WHO)*,the following table are preliminary recommendations developed as a guide on how many daily steps are sufficient for health benefits in generally healthy adults\n**<center> Pedometer Indices <center/>**\n    \n<div class=\"alert alert-block alert-info\">    \n                 \n| Steps per Day| Physical Activity Level |\n| :---         |          ---:           |\n| <5000        | Sedentary lifestyle     |\n| 5000-7499    | Low active              |\n| 7500-9999    | Somewhat active         |\n| >= 10 000    | Active                  |\n| >= 12 500    | Highly active           |\n\n</div>","metadata":{"papermill":{"duration":0.029488,"end_time":"2023-02-19T19:26:17.616611","exception":false,"start_time":"2023-02-19T19:26:17.587123","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"We now create a new dataframe that the daily_activity dataframe, then group and summarized it to get the average daily steps and average daily calories per user. Afterwards, we then get the activity level of users per daily steps based on conditions in the Pedmeter indices above","metadata":{"papermill":{"duration":0.029321,"end_time":"2023-02-19T19:26:17.675359","exception":false,"start_time":"2023-02-19T19:26:17.646038","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# Create a new dtaframe daily_steps_calories and grouped per id \n# We summarize by calculting the mean of total_steps and calories to their averages\n\ndaily_steps_calories <- daily_activity %>%\n  group_by(id) %>%\n  summarize(avg_daily_steps = mean(total_steps), avg_daily_calories = mean(calories))\n\n# We add a new column activity_level using mutate function\n# Then case_when() function to assign activity level based on avg_daily_steps\ndaily_steps_calories <- daily_steps_calories %>% \n  mutate(activity_level = case_when(avg_daily_steps < 5000 ~ \"Sedentary lifestyle\",\n                   avg_daily_steps < 7500 & avg_daily_steps >= 5000 ~ \"Low active\",\n                   avg_daily_steps < 10000 & avg_daily_steps >= 7500 ~ \"Somewhat active\",\n                   avg_daily_steps < 12500 & avg_daily_steps >= 10000 ~ \"Active\",\n                   avg_daily_steps >= 12500 ~ \"Highly active\")) %>%\n\n # we now order the category in our desired sequence\n mutate(activity_level =factor(activity_level, levels = \n     c(\"Sedentary lifestyle\", \"Low active\", \"Somewhat active\", \"Active\", \"Highly active\"), ordered = TRUE))\n\n\n# Display a preview of the new added column\nhead(daily_steps_calories)\n\n# Max Step =16040.032\n# Min Step =916.129","metadata":{"papermill":{"duration":0.09254,"end_time":"2023-02-19T19:26:17.798523","exception":false,"start_time":"2023-02-19T19:26:17.705983","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:43.593777Z","iopub.execute_input":"2024-05-20T08:07:43.595677Z","iopub.status.idle":"2024-05-20T08:07:43.67795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Next, we aggregate the daily steps activity levels per user with their percentages  and plot a pie chart showing the percentages of users per daily step activity levels. This will enable us determine the percentage of users who don't meet up with the recommended goal for daily steps of at least 7,500 steps per day. ","metadata":{"papermill":{"duration":0.029565,"end_time":"2023-02-19T19:26:17.857223","exception":false,"start_time":"2023-02-19T19:26:17.827658","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# we counted the number of users in each  category using the aggregate() function\n# Calculate the percentage of each category in activity_level using prop.table() and round values to 2dp\n\nactivity_level_count <- aggregate(daily_steps_calories$activity_level, \n  by = list(daily_steps_calories$activity_level), FUN = length)\ncolnames(activity_level_count) <- c(\"activity_level\",\"count\")\nactivity_level_count$percentage <- round(prop.table(activity_level_count$count)*100, 2)\n\n# display the resultant dataframe for preview\nactivity_level_count","metadata":{"papermill":{"duration":0.087193,"end_time":"2023-02-19T19:26:17.973824","exception":false,"start_time":"2023-02-19T19:26:17.886631","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:43.682269Z","iopub.execute_input":"2024-05-20T08:07:43.683878Z","iopub.status.idle":"2024-05-20T08:07:43.71737Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Using the geom_bar() and coord_polar(), we plot a pie chart\n# We then use the geom_text function to insert the percentage labels to the pie chart\n# we apply theme_void() to remove unnessary elements like border and background\n\n# Create a pie chart\nggplot(activity_level_count, aes(x = \"\", y = percentage, fill = activity_level)) +\n  geom_bar(width = 1, stat = \"identity\") +\n  coord_polar(\"y\", start = 0) +\n  geom_text(aes(label = paste0(round(percentage), \"%\")), \n     position = position_stack(vjust = 0.5), size=5, color = \"white\") +\n  theme_void() +\n\n  # Add the label name for both axes, title name and subtitle name\n  xlab(\"\")+\n  ylab(\"Percentage (%)\") +\n  ggtitle(\"Percentage of Users per Daily Steps Activity Level\") +\n  labs(subtitle = \"Over 51% of users don't their daily steps goals (>=7,500)\") + \n\n  # using the theme(), we customize the labels, titles, positions and the chart backround\n  theme(plot.title = element_text(size = 13, face = \"bold\", hjust = 0.5),\n        legend.position = \"right\", legend.title = element_text(size = 10, face = \"bold\"),\n        legend.text = element_text(size = 10),\n        plot.subtitle = element_text(size = 12, hjust = 0.5, face = \"italic\")) + \n\n# We manually assign our own colors to the chart or bar fills, modify legend title and labels \n  scale_fill_manual(labels = c(\"Sedentary lifestyle\" = \"Sedentary lifestyle (<5,000)\", \n                               \"Low active\" = \"Low active (5,000-7,499)\",\n                                \"Somewhat active\" = \"Somewhat active (7,500-9,999)\", \n                                \"Active\" = \"Active (>=10,000)\", \n                                \"Highly active\" = \"Highly active (>=12,500)\"),\n                    values = c(\"#F44336\", \"#9C27B0\", \"#2196F3\", \"#4CAF50\", \"brown\"),\n                                 name = \"Daily Steps Activity Levels\") ","metadata":{"papermill":{"duration":0.501945,"end_time":"2023-02-19T19:26:18.506451","exception":false,"start_time":"2023-02-19T19:26:18.004506","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:43.72165Z","iopub.execute_input":"2024-05-20T08:07:43.723217Z","iopub.status.idle":"2024-05-20T08:07:44.100738Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above Plot:\n* ***51%*** of the users don't meet their goals for daily steps of 7500 steps per day. Per the the physical activity level as shown above; they comprises of *Sedentary lifestyle (<5,000)* and *Low active (5,000-7,499)* physical activity level per daily steps. \n* Amongst the users who do reach their daily step goals, only ***6%*** are *highly active* as they were reach an average daily steps of *12,000* steps per day. ","metadata":{"papermill":{"duration":0.031783,"end_time":"2023-02-19T19:26:18.570587","exception":false,"start_time":"2023-02-19T19:26:18.538804","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.2.2\"></a>\n<h3 style=\"color: black;\">5.2.2 Avearge Daily Steps and Calories by Users per Weekday</h3>\n\nHaven expplored the daily steps of users and categorized them per physical activity level , we now explore the average daily steps and average calories burned by users per weekday. This is to chek for patterns in the users' daily steps per weekday and to determine the day of the week when users are most active and least active. ","metadata":{"papermill":{"duration":0.031051,"end_time":"2023-02-19T19:26:18.633509","exception":false,"start_time":"2023-02-19T19:26:18.602458","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We create a dataframe from the daily activity dataframe, then group and ordered the weekdays in sequence\n# We then calculate the average for the total active minutes and sedentary minutes per weekday\n\ndaily_steps_calories_per_weekday <- daily_activity %>%\n   mutate(weekday=factor(weekday, levels = \n     c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"), ordered = TRUE)) %>%\n   group_by(weekday) %>%\n  \n   summarize(avg_daily_steps = mean(total_steps), avg_daily_calories = mean(calories))\n\ndaily_steps_calories_per_weekday","metadata":{"papermill":{"duration":0.08489,"end_time":"2023-02-19T19:26:18.749642","exception":false,"start_time":"2023-02-19T19:26:18.664752","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:44.10533Z","iopub.execute_input":"2024-05-20T08:07:44.107327Z","iopub.status.idle":"2024-05-20T08:07:44.146286Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Next, we create column charts for both the average daily steps and average calories per weekday, then compare the both for any useful patterns.","metadata":{"papermill":{"duration":0.03201,"end_time":"2023-02-19T19:26:18.813796","exception":false,"start_time":"2023-02-19T19:26:18.781786","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We use geom_col() for avg_daily_steps and avg_daily_calories plots, with the weekdays on the x-axis. \n# The grid.arrange() function will arrange the two charts side by side in a 2-column grid. \n# We also adjust the width of the columns and specify color fills inside geom_col() function.\n# We also insert a horizontal intercept line at the 7,500 recommended daily step mark. \n\n# Create a column chart for avg_daily_steps \np1 <- ggplot(data = daily_steps_calories_per_weekday, aes(x = weekday, y = avg_daily_steps)) +\n  geom_col(fill = \"#03DDF2\", width = 0.8) +\n  theme_minimal() +\n  geom_hline(yintercept = 7500, linewidth = 0.5, color = \"red\")+\n  \n  # Add the label name for both axes, title name and subtitle name\n  xlab(\"Weekday\")+\n  ylab(\"Average Daily Steps\")+\n  ggtitle(\"Average Daily Steps per Weekday\")+\n  labs(subtitle = \"\")+\n\n  # using the theme(), we customize the axes labels, titles, positions and the chart backround\n  theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n        axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n        axis.title.x=element_text(size=14,face=\"bold\"),\n        axis.title.y=element_text(size=14,face=\"bold\"),\n        plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(size = 9, hjust = 0.5, face = \"italic\"),\n        panel.background = element_rect(fill = \"transparent\")) \n\n\n# Create a column chart for avg_daily_calories\np2 <- ggplot(data = daily_steps_calories_per_weekday, aes(x = weekday, y = avg_daily_calories)) +\n  geom_col(fill = \"blue\", width = 0.8) +\n  theme_minimal() +\n\n  # Add the label name for both axes and title name\n  xlab(\"Weekday\")+\n  ylab(\"Average Daily Calories Burned\")+\n  ggtitle(\"Average Daily Calories per Weekday\")+\n  labs(subtitle = \"\")+\n\n  # using the theme(), we customize the axes labels, titles, positions and the chart backround\n  theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n        axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n        axis.title.x=element_text(size=14,face=\"bold\"),\n        axis.title.y=element_text(size=14,face=\"bold\"),\n        plot.title = element_text(size = 12, face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(size = 9, hjust = 0.5, face = \"italic\"),\n        panel.background = element_rect(fill = \"transparent\"))\n\n# Use grid.arrange() to arrange the two column charts side by side in a 2-column grid\n# Arrange plots side-by-side\ngrid.arrange(p1, p2, ncol = 2)","metadata":{"papermill":{"duration":0.746563,"end_time":"2023-02-19T19:26:19.591846","exception":false,"start_time":"2023-02-19T19:26:18.845283","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:44.149032Z","iopub.execute_input":"2024-05-20T08:07:44.150503Z","iopub.status.idle":"2024-05-20T08:07:44.618194Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above Plot: \n* Users didn't meet the recommended amount of daily steps ***(>=7,500)*** on ***Sundays*** and partially on Thursdays and Fridays.\n* Users most active days are on ***Saturdays*** followed by Tuesdays as they have the most amount of daily steps respectively. \n* The amount of calories burned per weekday tend to mirror the amount of step steps taken. This imlplies  close relationship and possible correlation. ","metadata":{"papermill":{"duration":0.032819,"end_time":"2023-02-19T19:26:19.658301","exception":false,"start_time":"2023-02-19T19:26:19.625482","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.3\"></a>\n<h2 style=\"color: #A3E7D9;\">5.3 Daily Minutes Asleep</h2>\n\nHere we explore the ***daily_activity_sleep*** dataframe to determine if users are meeting up with the recommendd guideline for sleep and also check for patterns per weekday.\n\nThe ***National Sleep Foundation (NSF)*** recommends that both adults and young adults aim for 7-9 hours of sleep per night, which translates to to average of 8 hours per day.\n","metadata":{"papermill":{"duration":0.034068,"end_time":"2023-02-19T19:26:19.72524","exception":false,"start_time":"2023-02-19T19:26:19.691172","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.3.1\"></a>\n<h3 style=\"color: black;\">5.3.1 Average Daily Sleep per User</h3>\n\nHere we calculate and explore the average daily sleep of the users to determine if they are meeting their sleep goals","metadata":{"papermill":{"duration":0.032946,"end_time":"2023-02-19T19:26:19.790762","exception":false,"start_time":"2023-02-19T19:26:19.757816","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We Calculate the avg daily sleep and group per user id\ndaily_sleep_per_user <- daily_activity_sleep %>%\n  group_by(id) %>%\n  summarize(avg_daily_sleep = mean(total_hours_asleep))\n\n# Display the new dataframe for preview\nhead(daily_sleep_per_user)","metadata":{"papermill":{"duration":0.093394,"end_time":"2023-02-19T19:26:19.91656","exception":false,"start_time":"2023-02-19T19:26:19.823166","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:44.621088Z","iopub.execute_input":"2024-05-20T08:07:44.622626Z","iopub.status.idle":"2024-05-20T08:07:44.655297Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# From the daily_sleep_per_user dataframe we get the percentage of users with avg_daily_sleep >= 8 hours\n\n# We filter rows where avg_daily_sleep >= 8\navg_daily_sleep_filtered <- daily_sleep_per_user %>%  \n  filter(avg_daily_sleep >= 8)\n\n# We count and get number of rows\nnum_rows <- nrow(avg_daily_sleep_filtered)\n\n# We calculate percentage\npercentage <- (num_rows / nrow(daily_sleep_per_user)) * 100\n\nprint(percentage)","metadata":{"papermill":{"duration":0.097315,"end_time":"2023-02-19T19:26:20.046334","exception":false,"start_time":"2023-02-19T19:26:19.949019","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:44.658143Z","iopub.execute_input":"2024-05-20T08:07:44.659615Z","iopub.status.idle":"2024-05-20T08:07:44.687749Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Next, we plot a Guage Chart shoing the percentage of users that met the recommeneded sleep guideline duration. That is users with an average daily sleep duration of 8 hours or more. ","metadata":{"papermill":{"duration":0.03326,"end_time":"2023-02-19T19:26:20.11228","exception":false,"start_time":"2023-02-19T19:26:20.07902","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We use plot_ly() from the plotly package to plot a guage chart, indicating the data for value ranges\n# We assign it the \"indicator\" type to specify that only one value will be ploted\n# We specify the \"mode\" showing that we will plot a guage with a number value\n\n# Define the data for the gauge chart\nvalue <- 8\nmin_value <- 0\nmax_value <- 100\n\n# Create the gauge chart\nplot_ly(type = \"indicator\",\n               mode = \"gauge+number\",\n               value = value,\n               title = list(text = \"Percentage of Users with the Daily Recommended Sleep Duration\", \n                            font = list(size = 15, family = \"Arial, sans-serif\")),\n               gauge = list(axis = list(range = c(min_value, max_value), tickwidth = 1, tickcolor = \"darkblue\"),\n                            bar = list(color = \"darkblue\"),\n                            steps = list(list(range = c(min_value, 45), color = \"#7E0210\"),\n                                         list(range = c(45, 75), color = \"#FDA600\"),\n                                         list(range = c(75, max_value), color = \"#4CAF50\")),\n                            threshold = list(line = list(color = \"black\", width = 3),\n                                             thickness = 1,\n                                             value = 8.3)),\n               width = 600,\n               height = 300) %>%\n\n# We customize the Chart margins\nlayout(margin = list(l = 0, r = 0, b = 30, t = 60, pad = 0))\n\n","metadata":{"papermill":{"duration":3.119312,"end_time":"2023-02-19T19:26:23.264187","exception":false,"start_time":"2023-02-19T19:26:20.144875","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:44.690593Z","iopub.execute_input":"2024-05-20T08:07:44.692044Z","iopub.status.idle":"2024-05-20T08:07:46.170654Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above plot:\n* Only ***8%*** of users meet the recommended guideline for the daily sleep duration of 8 hours per day. ","metadata":{"papermill":{"duration":0.134851,"end_time":"2023-02-19T19:26:23.554718","exception":false,"start_time":"2023-02-19T19:26:23.419867","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.3.2\"></a>\n<h3 style=\"color: black;\">5.3.2 Avrerage Daily Sleep per Weekday</h3>\n\nHere, we calculate the average daily sleep of users per weekday to determine the pattern of sleep duration of users per weekday and check if they are reaching the recommended goal for sleep in each weekday. ","metadata":{"papermill":{"duration":0.130982,"end_time":"2023-02-19T19:26:23.814016","exception":false,"start_time":"2023-02-19T19:26:23.683034","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We create a dataframe daily_sleep_per_weekday, then group and ordered the weekdays in sequence\n# We then calculate the average for the total hours asleep per weekday\n\ndaily_sleep_per_weekday <- daily_activity_sleep %>%\n   mutate(weekday=factor(weekday, levels = \n     c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"), ordered = TRUE)) %>%\n   group_by(weekday) %>%\n   summarize(avg_daily_sleep_per_weekday = mean(total_hours_asleep))\n\ndaily_sleep_per_weekday","metadata":{"papermill":{"duration":0.183337,"end_time":"2023-02-19T19:26:24.118851","exception":false,"start_time":"2023-02-19T19:26:23.935514","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:46.173512Z","iopub.execute_input":"2024-05-20T08:07:46.175397Z","iopub.status.idle":"2024-05-20T08:07:46.209603Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Next, we plot a column chart showing the above average daily sleep per weekday","metadata":{"papermill":{"duration":0.132802,"end_time":"2023-02-19T19:26:24.382435","exception":false,"start_time":"2023-02-19T19:26:24.249633","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We use geom_col() avg_daily_sleep_per_weekday plot, with the weekday on the x-axis.  \n# We also adjust the width of the columns and specify color fills inside geom_col() function.\n# We also insert a horizontal intercept line at the 8 HOUR MARK for the recommended daily sleep duration. \n\n# Create a column chart for avg_daily_steps \nggplot(data = daily_sleep_per_weekday, aes(x = weekday, y = avg_daily_sleep_per_weekday)) +\n  geom_col(fill = \"#00008B\", width = 0.5) +\n  theme_minimal() +\n  geom_hline(yintercept = 8, linewidth = 0.5, color = \"red\")+\n  \n  # Add the label name for both axes, title name and subtitle name\n  xlab(\"Weekday\")+\n  ylab(\"Average Daily Sleep\")+\n  ggtitle(\"Average Daily Sleep per Weekday\")+\n  labs(subtitle = \"Users don't meet their daily sleep goal per weekday\")+\n\n  # using the theme(), we customize the axes labels, chart titles, gridlines, positions and the chart backround\n  theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n        axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n        axis.title.x=element_text(size=14,face=\"bold\"),\n        axis.title.y=element_text(size=14,face=\"bold\"),\n        plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n        plot.subtitle = element_text(size = 15, hjust = 0.5, face = \"italic\"),\n        panel.background = element_rect(fill = \"#212225\"),\n        panel.grid = element_line(linewidth = 0.5, color = \"#DDDDDD\", linetype = \"dashed\")) ","metadata":{"papermill":{"duration":0.46837,"end_time":"2023-02-19T19:26:24.97301","exception":false,"start_time":"2023-02-19T19:26:24.50464","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:46.212328Z","iopub.execute_input":"2024-05-20T08:07:46.213788Z","iopub.status.idle":"2024-05-20T08:07:46.48118Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above Chart:\n* Although users sleep more on ***Sundays*** and ***Wednesdays***, they don't reach their daily recommeneded sleep goal, which is sleep duration of at least 8 hours a day. ","metadata":{"papermill":{"duration":0.11985,"end_time":"2023-02-19T19:26:25.21312","exception":false,"start_time":"2023-02-19T19:26:25.09327","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"\n<a id=\"subsection5.4\"></a>\n<h2 style=\"color: #A3E7D9;\">5.4 Hourly Activities throughout the Day</h2>\n\nHere we explore the hourly actitivis of users throughout the a dy period. The *hourly steps* and *intensities* will explored throughout a day period. \n\nIntensity is a measure of the level of effort or exertion required to perform a specific activity. In this context, the intensity metric is typically used to track the level of exertion or effort during the users' steps activity.\n\nTo effectively determine this, we already caterogized the hours of the day into day period during the Data Cleaning and Transformation, after which we added the column ***day_period*** to the dataframe ***hourly_activities***.\n\nFor Reference, the category includes;\n* **Morning**: Period of time between midnight and noon.\n* **Afternoon**: Period of time between noon and 6:00 PM.\n* **Evening**: Period of time between 6:00 PM and midnight","metadata":{"papermill":{"duration":0.121038,"end_time":"2023-02-19T19:26:25.453886","exception":false,"start_time":"2023-02-19T19:26:25.332848","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# From the hourly_activity dataframe, we group the hourly activities by day period in needed sequence\n# wWe summarize by calculating the average hourly steps, intensity and calories burned per day period\n\navg_hourly_activity <- hourly_activity %>%\n\n  mutate(day_period =factor(day_period, levels = \n     c(\"morning\", \"afternoon\", \"evening\"), ordered = TRUE)) %>% \n  group_by(day_period) %>%\n  summarize(avg_hourly_steps = mean(step_total), avg_hourly_intensity = mean(total_intensity), \n            avg_hourly_calories = mean(calories))\n\n# We display the new dataframe for preview\navg_hourly_activity","metadata":{"papermill":{"duration":0.182682,"end_time":"2023-02-19T19:26:25.756073","exception":false,"start_time":"2023-02-19T19:26:25.573391","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:46.484012Z","iopub.execute_input":"2024-05-20T08:07:46.485497Z","iopub.status.idle":"2024-05-20T08:07:46.524596Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Next, we plot horizontal bar charts to show the average hourly steps and average hourly intensity per day period.","metadata":{"papermill":{"duration":0.120103,"end_time":"2023-02-19T19:26:25.995624","exception":false,"start_time":"2023-02-19T19:26:25.875521","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We create a theme variable to easily apply them to the charts \n\n# using the theme(), we customize the axes labels, titles, positions and the chart backround\nmy_theme <- theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n                axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n                axis.title.x=element_text(size=14,face=\"plain\"),\n                axis.title.y=element_text(size=14,face=\"plain\"),\n                plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n                plot.subtitle = element_text(size = 15, hjust = 0.5, face = \"italic\"),\n                panel.background = element_rect(fill = \"transparent\"),\n                panel.grid = element_line(linewidth = 0.5, color = \"gray\", linetype = \"dashed\"))","metadata":{"papermill":{"duration":0.154076,"end_time":"2023-02-19T19:26:26.271516","exception":false,"start_time":"2023-02-19T19:26:26.11744","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:46.527559Z","iopub.execute_input":"2024-05-20T08:07:46.529123Z","iopub.status.idle":"2024-05-20T08:07:46.543045Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# We create a horizontal bar charts for both hourly steps and intensity per day period\n# we use the grid.arrange() to arrange the both plots up and down in a 2-row grid\n\n# Crete a plot for the hourly steps\np1 <- ggplot(data = avg_hourly_activity, aes(x = avg_hourly_steps, y = day_period)) +\n          geom_col(fill = \"#FE8F77\", width = 0.5) + \n          theme_minimal() + \n\n          # Add the label name for both axes, title name and subtitle name\n          xlab(\"Average Hourly Steps\")+\n          ylab(\"Day Period\")+\n          ggtitle(\"Average Hourly Steps Throughout the Day\")+\n          labs(subtitle = \"\") + \n\n          # Apply the already assigned theme and remove the legend using guide()\n          my_theme \n          \n# Create a plot for the hourly intensity\np2<- ggplot(data = avg_hourly_activity, aes(x = avg_hourly_intensity, y = day_period)) +\n          geom_col(fill = \"#A3E7D9\", width = 0.5) + \n          theme_minimal() + \n\n          # Add the label name for both axes, title name and subtitle name\n          xlab(\"Average Hourly Intensity\")+\n          ylab(\"Day Period\")+\n          ggtitle(\"Average Hourly Intensity Throughout the Day\")+\n          labs(subtitle = \"\") + \n\n          # Apply the already assigned theme and remove the chart legend using guides()\n          my_theme \n          \n\n# Use grid.arrange() to arrange the two column charts side by side in a 2-row grid\n# Arrange plots side-by-side\ngrid.arrange(p1, p2, nrow = 2)","metadata":{"papermill":{"duration":0.796144,"end_time":"2023-02-19T19:26:27.18698","exception":false,"start_time":"2023-02-19T19:26:26.390836","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:46.545978Z","iopub.execute_input":"2024-05-20T08:07:46.54747Z","iopub.status.idle":"2024-05-20T08:07:46.981256Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above Plot:\n* Uers are more active in the ***afternoon*** (between noon and 6:00 PM), followed by evening, reaching more steps with matching intensity.\n* They reach the least steps in the morning with low intensity as well\n* The matching intensity is an indiation that users exert more effort during more active times and high amount of steps. This level of effort is low in the morning when users take the lest number of steps. ","metadata":{"papermill":{"duration":0.124776,"end_time":"2023-02-19T19:26:27.437184","exception":false,"start_time":"2023-02-19T19:26:27.312408","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.5\"></a>\n<h2 style=\"color: #A3E7D9;\">5.5 Correlations</h2>\n\nHaven explored the various metrics to extrapoliate patterns in the users' activities and fitness tracker habits, we now correlate some dependent metrics with other metrics to further establish possible cause-effect relationships.","metadata":{"papermill":{"duration":0.123525,"end_time":"2023-02-19T19:26:27.686917","exception":false,"start_time":"2023-02-19T19:26:27.563392","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.5.1\"></a>\n<h3 style=\"color: black;\">5.5.1 Daily Sleep duration vs Total Time in Bed and Active Minutes</h3>\n\nHere we plot and correlate the daily sleep duration against total daily time in bed and total daily active miniutes of users.\n","metadata":{"papermill":{"duration":0.126339,"end_time":"2023-02-19T19:26:27.938332","exception":false,"start_time":"2023-02-19T19:26:27.811993","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# We create a theme variable to easily apply them to the charts \n\n# using the theme(), we customize the axes labels, titles, positions and the chart backround\nmy_theme <- theme_minimal() + \n           theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n                axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n                axis.title.x=element_text(size=14,face=\"plain\"),\n                axis.title.y=element_text(size=14,face=\"plain\"),\n                plot.title = element_text(size = 11, face = \"bold\", hjust = 0.5),\n                panel.background = element_rect(fill = \"transparent\"),\n                panel.grid = element_line(linewidth = 0.5, color = \"gray\", linetype = \"dashed\"))","metadata":{"papermill":{"duration":0.161594,"end_time":"2023-02-19T19:26:28.22723","exception":false,"start_time":"2023-02-19T19:26:28.065636","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:46.984149Z","iopub.execute_input":"2024-05-20T08:07:46.985619Z","iopub.status.idle":"2024-05-20T08:07:47.003129Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Using grid.arrange(), we arrange the both plots in one grid\n\n# We calculate the Correlation Coefficient of the variables\ncor_coef <- cor(daily_activity_sleep$total_active_minutes, daily_activity_sleep$total_hours_asleep)\n\n# We plot the scattered plot, add a smoothing trendline and annotate the correlation Coefficient\np1 <- ggplot(daily_activity_sleep, aes(x=total_active_minutes, y=total_hours_asleep))+\n          geom_jitter() +\n          geom_smooth(color = \"blue\") + \n          labs(title = \"Daily Sleep Duration vs Active Minutes\", x = \"Active Minutes\", y= \"Hours Asleep\") +\n          annotate(\"text\", x = 430, y = 12.5, label = paste(\"r = \", round(cor_coef, 2)), size = 7, color = \"blue\") +\n\n          # Applying the already assigned theme\n          my_theme\n\n# We calculate the Correlation Coefficient of the variables\ncor_coef <- cor(daily_activity_sleep$total_time_in_bed, daily_activity_sleep$total_hours_asleep)\n\n# We plot the scattered plot, add a smoothing trendline and annotate the correlation Coefficient\np2 <- ggplot(daily_activity_sleep, aes(x=total_time_in_bed, y=total_hours_asleep))+\n          geom_jitter() +\n          geom_smooth(color = \"blue\") + \n          labs(title = \"Daily Sleep Duration vs Total Time in Bed\", x = \"Total Time in Bed\", y= \"Hours Asleep\") +\n          annotate(\"text\", x = 250, y = 12.5, label = paste(\"r = \", round(cor_coef, 2)), size = 7, color = \"blue\") +\n\n          # Applying the already assigned theme\n          my_theme\n\n# Use grid.arrange() to arrange the two Scattered plots side by side in a 2-column grid\n\n# Arrange plots side-by-side\ngrid.arrange(p1, p2, ncol = 2)","metadata":{"papermill":{"duration":2.791119,"end_time":"2023-02-19T19:26:31.140499","exception":false,"start_time":"2023-02-19T19:26:28.34938","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:47.00616Z","iopub.execute_input":"2024-05-20T08:07:47.007824Z","iopub.status.idle":"2024-05-20T08:07:47.592649Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From our Plot:\n* The correlation plot for Active Minutes above indicate a no monotonic relationship betwen daily sleep duration with daily active minutes by the users. This is shown in the smoothing trendline and the ***correlation cofficient (r)*** of value in the vicinity of zero. \n* However, there is a strong positive correlation between Hours Asleep and the Total Time in Bed by the users, with a ***correlation cofficient (r)*** of <code>0.93<code/>.","metadata":{"papermill":{"duration":0.124298,"end_time":"2023-02-19T19:26:31.395075","exception":false,"start_time":"2023-02-19T19:26:31.270777","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.5.2\"></a>\n<h3 style=\"color: black;\">5.5.2 Calories Burned vs Steps and Intensity</h3>\n\nHere, we correlate the ***Calories burned*** by users with the ***Steps taken*** and also ***Intensities*** to explore a possible cause-effect relationship between the varaibles.\n","metadata":{"papermill":{"duration":0.125496,"end_time":"2023-02-19T19:26:31.644938","exception":false,"start_time":"2023-02-19T19:26:31.519442","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# From the hourly_activity dataframe, we correlate the calories column with both step_total and intensity columns\n# We plot the scttered plot and attached the correlation coefficient (r) for the plots\n\n# We calculate the Correlation Coefficient of the variables\ncor_coef <- cor(hourly_activity$step_total, hourly_activity$calories)\n\n# We plot the scattered plot, add a smoothing trendline and annotate the correlation Coefficient\np1 <- ggplot(hourly_activity, aes(x=step_total, y=calories))+\n          geom_jitter() +\n          geom_smooth(color = \"#FE8F77\") + \n          labs(title = \"Calories Burned vs Steps Taken\", x = \"Steps Taken\", y= \"Calories Burned\") +\n          annotate(\"text\", x = 5000, y = 875, label = paste(\"r = \", round(cor_coef, 2)), \n                   size = 7, color = \"#FE8F77\") +\n\n          # Applying the already assigned theme\n          my_theme\n\n# We calculate the Correlation Coefficient of the variables\ncor_coef <- cor(hourly_activity$total_intensity, hourly_activity$calories)\n\n# We plot the scattered plot, add a smoothing trendline and annotate the correlation Coefficient\np2 <- ggplot(hourly_activity, aes(x=total_intensity, y=calories))+\n          geom_jitter() +\n          geom_smooth(color = \"#FE8F77\") + \n          labs(title = \"Calories Burned vs Total Intensity\", x = \"Total Intensity\", y= \"Calories Burned\") +\n          annotate(\"text\", x = 50, y = 875, label = paste(\"r = \", round(cor_coef, 2)), size = 7, color = \"#FE8F77\") +\n\n          # Applying the already assigned theme\n          my_theme\n\n#  Use grid.arrange() to arrange the two Scattered plots side by side in a 2-column grid\n\n# Arrange plots side-by-side\ngrid.arrange(p1, p2, ncol = 2)","metadata":{"papermill":{"duration":4.803002,"end_time":"2023-02-19T19:26:36.571669","exception":false,"start_time":"2023-02-19T19:26:31.768667","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:47.596435Z","iopub.execute_input":"2024-05-20T08:07:47.598813Z","iopub.status.idle":"2024-05-20T08:07:51.902356Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above Plots:\n* There is a quite ***positive correlation*** between the variables as shown in the plots above considering their smoothing trendline and their correlation coefficients which is within the vicinity of +1.\n* This further buttress the fact that increase in high level physical activity like steps result in increase of calories burned epecially when done with ***more intensity*** or effort like running or jogging.\n* The few outliers data points in the ***Calories vs Steps Taken*** plot is an indication that users with few steps but with  high intensity see an optimal result in terms of the amount of calories burned just like users with more steps but with lower intensity. ","metadata":{"papermill":{"duration":0.12767,"end_time":"2023-02-19T19:26:36.833269","exception":false,"start_time":"2023-02-19T19:26:36.705599","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"subsection5.5.3\"></a>\n<h3 style=\"color: black;\">5.5.3 Daily Active Minuites vs Steps Taken</h3>\n\nHere, we explore the correlation betwween the daily active minutes of users and steps taken to see if there are any relationship between the variables.","metadata":{"papermill":{"duration":0.12925,"end_time":"2023-02-19T19:26:37.090095","exception":false,"start_time":"2023-02-19T19:26:36.960845","status":"completed"},"tags":[]}},{"cell_type":"code","source":"# From the daily_activity dataframe, \n# we correlate the total_active_minutes column with both total_steps\n# We plot the scttered plot and attached the correlation coefficient (r) for the plots\n\n# We calculate the Correlation Coefficient of the variables\ncor_coef <- cor(daily_activity$total_steps, daily_activity$total_active_minutes)\n\n# We plot the scattered plot, add a smoothing trendline and annotate the correlation Coefficient\np1 <- ggplot(daily_activity, aes(x=total_steps, y=total_active_minutes))+\n          geom_jitter() +\n          geom_smooth(color = \"#4CAF50\") + \n          labs(title = \"Daily Active Minutes vs Steps Taken\", x = \"Steps Taken\", y= \"Active Minutes\") +\n          annotate(\"text\", x = 20000, y = 640, label = paste(\"r = \", round(cor_coef, 2)), \n                   size = 7, color = \"#4CAF50\") +\n\n          # Customizng the theme\n          theme_minimal() + \n           theme(axis.text.y=element_text(angle=0, hjust=1,size=12,face=\"bold\"),\n                axis.text.x=element_text(angle=45, hjust=1,size=12,face=\"bold\"),\n                axis.title.x=element_text(size=14,face=\"bold\"),\n                axis.title.y=element_text(size=14,face=\"bold\"),\n                plot.title = element_text(size = 14, face = \"bold\", hjust = 0.5),\n                panel.background = element_rect(fill = \"transparent\"),\n                panel.grid = element_line(linewidth = 0.5, color = \"gray\", linetype = \"dashed\"))\n\n# Display the Plot\np1","metadata":{"papermill":{"duration":0.567376,"end_time":"2023-02-19T19:26:37.788501","exception":false,"start_time":"2023-02-19T19:26:37.221125","status":"completed"},"tags":[],"execution":{"iopub.status.busy":"2024-05-20T08:07:51.905133Z","iopub.execute_input":"2024-05-20T08:07:51.906521Z","iopub.status.idle":"2024-05-20T08:07:52.301328Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"From the above Plot:\n\n* We observe a moderately strong positive correlation between the ***Daily Active Minutes*** and ***Steps Taken***. This is shown by the smoothing trendline and a ***correlation coefficient (r)*** of <code>***0.77***<code/>\n* This further shows that users with high active minutes also take a high amount of steps daily, indicating that steps taken constitute a good part of the active minutes by the users'physical activity. ","metadata":{"papermill":{"duration":0.132696,"end_time":"2023-02-19T19:26:38.058167","exception":false,"start_time":"2023-02-19T19:26:37.925471","status":"completed"},"tags":[]}},{"cell_type":"markdown","source":"<a id=\"section6\"></a>\n<h1 style=\"color: #FE8F77;\">6. Act Phase (Recommendations)</h1>\n\nHere, we conclude our top high-level actionable insights and recommendations based on the analysis done. These of course has to align with the business goal and objectives. Bellabeat's mission is to empower women by providing them with the data to discover themselves. The goal of our analysis is to provide actionable insights from consumer’s user habit of non-Bellabeat smart devices so as to improve Bellabeat marketing strategy. The focus is on one the Bellabeat product called ***Bellabeat+ Membership***\n\n**Bellabeat+ Membership**: a subscription service that provides women with specialized content in all wellness segments. Membership gives users 24/7 access to fully personalized guidance on nutrition, activity, sleep, health and beauty, and mindfulness based on their lifestyle and goals. With the subscription (**_that can be used with and without the device_**), users receive personalized daily plans and coaching, aligned with their menstrual cycle and goals.\n\nJust like any subscription service, the goal is to ensure that the target audience finds the subscription useful enough to be able to subscribe to it or continue using the subscription. It has to be relevant to the target audience or users. \n\nIn this Scenario, the relevance will be determined by the users activity perfomance and physical activity level in comparison to the recommended guidelines for physical activity. These help in indentfying areas of improvement which are likely to be relevant to the users health goals and overall well being. Once identified, personalized subscription contents can be targeted to the users. \n\nFor this to be achieved, I will recommend that a bigger and recent sample data be used for more credibility. This sample data should include the user demographics so as well as other health metrics that can be used to determine the users health status. This is beacuse the recommendation is based on ***young adult*** demographics and also the amount of physical activities  needed to maintain good health may vary depending on an individual's current level of physical activity, overall health status, age and fitness goals. Having a full grasp of the needed metrics will further aid in a successful marketing campaign and strategy. \n\nBased on our analysis of the users' activities, we idenified some groups and insights that will be useful for a successful marketing campaign of ***Bellabeat+ Membership***. This shows users with different activity level together and users who come short of the required physical level activity. The marketing team with the guidance of the health and fitness experts will have to tailor the daily plans to subscribers. This makes sure that the plans are sent to users who need them, giving rise to an effective marketing strategy. Furthermore, the company can use this analysis to identify pontential areas that might require scaling. However, this has to be done in conjuction with insights from other Products analyses as it requires a more holistic approach and view. \n\n","metadata":{"papermill":{"duration":0.129697,"end_time":"2023-02-19T19:26:38.318538","exception":false,"start_time":"2023-02-19T19:26:38.188841","status":"completed"},"tags":[]}}]}